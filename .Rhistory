ggplot(data, aes(x = factor(riego), y = spad_29)) +  # Cambia spad_29 según la variable de interés
geom_boxplot(fill = "lightblue", color = "darkblue") +
labs
library(ggplot2)
# Crear el boxplot
ggplot(data, aes(x = factor(riego), y = spad_29)) +  # Asegúrate de que "spad_29" sea el nombre correcto
geom_boxplot(fill = "lightblue", color = "darkblue") +
xlab("Tratamiento de Riego") +
ylab("Valores de SPAD 29") +
ggtitle("Distribución de SPAD 29 por Tratamientos de Riego") +
theme_minimal()
()
library(ggplot2)
# Crear el boxplot
ggplot(data, aes(x = factor(riego), y = spad_29)) +  # Asegúrate de que "spad_29" sea el nombre correcto
geom_boxplot(fill = "lightblue", color = "darkblue") +
xlab("Tratamiento de Riego") +
ylab("Valores de SPAD 29") +
ggtitle("Distribución de SPAD 29 por Tratamientos de Riego") +
theme_minimal(base_rect_size = )
()
# Cargar librerías si es necesario
library(ggplot2)
# Crear el boxplot
ggplot(data, aes(x = factor(riego), y = spad_29)) +  # Asegúrate de que "spad_29" sea el nombre correcto
geom_boxplot(fill = "lightblue", color = "darkblue") +
xlab("Tratamiento de Riego") +
ylab("Valores de SPAD 29") +
ggtitle("Distribución de SPAD 29 por Tratamientos de Riego") +
theme_minimal()  # Elimina el argumento base_rect_size que no está definido
()
# Cargar librerías si es necesario
library(ggplot2)
# Crear el boxplot
ggplot(data, aes(x = factor(riego), y = spad_83)) +  # Asegúrate de que "spad_29" sea el nombre correcto
geom_boxplot(fill = "lightblue", color = "darkblue") +
xlab("Tratamiento de Riego") +
ylab("Valores de SPAD 29") +
ggtitle("Distribución de SPAD 29 por Tratamientos de Riego") +
theme_minimal()  # Elimina el argumento base_rect_size que no está definido
()
# Cargar librerías si es necesario
library(ggplot2)
# Crear el boxplot
ggplot(data, aes(x = factor(riego), y = spad_83)) +  # Asegúrate de que "spad_29" sea el nombre correcto
geom_boxplot(fill = "lightblue", color = "darkblue") +
xlab("Tratamiento de Riego") +
ylab("Valores de SPAD 29") +
ggtitle("Distribución de SPAD 83 por Tratamientos de Riego") +
theme_minimal()  # Elimina el argumento base_rect_size que no está definido
()
str(object = )
# Cargar librerías si es necesario
library(ggplot2)
# Crear el boxplot
ggplot(data, aes(x = factor(riego), y = spad_83)) +  # Asegúrate de que "spad_29" sea el nombre correcto
geom_boxplot(fill = "lightblue", color = "darkblue") +
xlab("Tratamiento de Riego") +
ylab("Valores de SPAD 29") +
ggtitle("Distribución de SPAD 83 por Tratamientos de Riego") +
theme_minimal()  # Elimina el argumento base_rect_size que no está definido
ggplot(datos, aes(x = Cultivar, y = Eficiencia)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Eficiencia de Riego en Cultivares de Papa",
x = "Cultivar",
y = "Eficiencia (%)") +
theme_minimal()
library(ggplot2)
library(readxl)
library(ggplot2)
head(datos)  # Muestra las primeras filas del dataset
data
ggplot(datos, aes(x = Cultivar, y = Eficiencia)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Eficiencia de Riego en Cultivares de Papa",
x = "Cultivar",
y = "Eficiencia (%)") +
theme_minimal()
### Gráfico en ggplot2
ggplot(mc, aes(x = variedad, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(readxl)
library(ggplot2)
data
data
### Gráfico en ggplot2
ggplot(mc, aes(x = variedad, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
### Gráfico en ggplot2
ggplot(mc, aes(x = variedad, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Asegúrate de que los paquetes están cargados
library(readxl)
library(ggplot2)
# Cargar los datos en el objeto mc (asegúrate de ajustar el archivo y la hoja correctos)
mc <- read_excel()  # Reemplaza con la ruta correcta del archivo
# Asegúrate de que los paquetes están cargados
library(readxl)
library(ggplot2)
data <- read_excel("eficiencia de riego papa.xlsx")
head(data)
### Gráfico en ggplot2
ggplot(mc, aes(x = variedad, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data <- read_excel("eficiencia de riego papa.xlsx")
# Asegúrate de que los paquetes están cargados
library(readxl)
data <- read_excel("eficiencia de riego papa.xlsx")
head(data)
### Gráfico en ggplot2
ggplot(mc, aes(x = variedad, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
head(data)
# Verificar la estructura
str(mc)
# Asegúrate de que los paquetes están cargados
library(readxl)
library(ggplot2)
data <- read_excel("eficiencia de riego papa.xlsx")
head(data)
# Verificar la estructura
str(data)
### Gráfico en ggplot2
ggplot(data, aes(x = variedad, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
### Gráfico en ggplot2
ggplot(data, aes(x = variedad, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "geno", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Asegúrate de que los paquetes están cargados
library(readxl)
library(ggplot2)
data <- read_excel("eficiencia de riego papa.xlsx")
head(data)
# Verificar la estructura
str(data)
### Gráfico en ggplot2
ggplot(data, aes(x = data, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "geno", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
### Gráfico en ggplot2
ggplot(mc, aes(x = geno, y = lfa, fill = riego)) +
geom_col(position = position_dodge()) +
geom_text(aes(label = round(lfa, 1)), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Geno", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
### Gráfico en ggplot2
ggplot(data, aes(x = geno, y = lfa, fill = riego)) +
geom_col(position = position_dodge()) +
geom_text(aes(label = round(lfa, 1)), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Geno", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
install.packages("emmeans")
library(emmeans)
install.packages("ggplot2")
library (ggplot2)
ggplot(data, aes(x = block, y = lfa, fill = block)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16, outlier.size = 2) +  # Personaliza los outliers
geom_jitter(width = 0.2, alpha = 0.5) +  # Añade puntos de datos con un poco de dispersión
labs(title = "Box Plot de lfa por Block", x = "Block", y = "lfa") +
theme_minimal()
install.packages("ggplot2")
install.packages("ggplot2")
library (ggplot2)
library (ggplot2)
ggplot(data, aes(x = block, y = lfa, fill = block)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16, outlier.size = 2) +  # Personaliza los outliers
geom_jitter(width = 0.2, alpha = 0.5) +  # Añade puntos de datos con un poco de dispersión
labs(title = "Box Plot de lfa por Block", x = "Block", y = "lfa") +
theme_minimal()
install.packages("pkgdown")
# Run once to configure your package to use and deploy pkgdown
usethis::use_pkgdown_github_pages()
# Cargar librerías si es necesario
library(ggplot2)
# Crear el boxplot
ggplot(data, aes(x = factor(riego), y = spad_83)) +  # Asegúrate de que "spad_29" sea el nombre correcto
geom_boxplot(fill = "lightblue", color = "darkblue") +
xlab("Tratamiento de Riego") +
ylab("Valores de SPAD 29") +
ggtitle("Distribución de SPAD 83 por Tratamientos de Riego") +
theme_minimal()  # Elimina el argumento base_rect_size que no está definido
install.packages("emmeans")
library(emmeans)
tukey_result <- HSD.test(modelo, "riego", group = TRUE)
# Asegúrate de que la variable de tratamiento es un factor
data$riego <- as.factor(data$riego)
# Ajuste del modelo
modelo <- aov(spad_29 ~ riego, data = data)  # Cambia spad_29 por otra variable si es necesario
summary(modelo)
install.packages("ggplot2", repos = "https://cloud.r-project.org/")
install.packages("pkgdown", repos = "https://cloud.r-project.org/")
install.packages("pkgdown", repos = "https://cloud.r-project.org/")
install.packages("pkgdown", repos = "https://cloud.r-project.org/")
install.packages("pkgdown", repos = "https://cloud.r-project.org/")
# Run once to configure your package to use and deploy pkgdown
usethis::use_pkgdown_github_pages()
# Run once to configure your package to use and deploy pkgdown
usethis::use_pkgdown_gh repo clone cristian-florida/Clase-R_01_pages()
# Run once to configure your package to use and deploy pkgdown
usethis::use_pkgdown_github_pages()
# Run once to configure your package to use and deploy pkgdown
usethis::use_pkgdown
install.packages("pkgdown")
options(repos = c(CRAN = "https://cloud.r-project.org/"))
# Asegúrate de que los paquetes están cargados
library(readxl)
library(ggplot2)
data <- read_excel("eficiencia de riego papa.xlsx")
head(data)
# Verificar la estructura
str(data)
### Gráfico en ggplot2
ggplot(data, aes(x = geno, y = lfa, fill = riego)) +
geom_col(position = position_dodge()) +
geom_text(aes(label = round(lfa, 1)), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Geno", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
install.packages("emmeans")
library(emmeans)
ggplot(mc, aes(x = variedad, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
### Gráfico en ggplot2
{r}
### Gráfico en ggplot2
ggplot(mc, aes(x = variedad, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
### Gráfico en ggplot2
ggplot(data, aes(x = variedad, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
### Gráfico en ggplot2
ggplot(data, aes(x = geno, y = lfa, fill = riego)) +
geom_col(position = position_dodge()) +
geom_text(aes(label = round(lfa, 1)), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Geno", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
### Gráfico en ggplot2
ggplot(data, aes(x = geno, y = lfa, fill = riego)) +
geom_col(position = position_dodge()) +
geom_text(aes(label = round(lfa, 1)), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Geno", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Asegúrate de que los paquetes están cargados
library(readxl)
library(ggplot2)
data <- read_excel("eficiencia de riego papa.xlsx")
head(data)
# Verificar la estructura
str(data)
### Gráfico en ggplot2
ggplot(data, aes(x = geno, y = lfa, fill = riego)) +
geom_col(position = position_dodge()) +
geom_text(aes(label = round(lfa, 1)), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Geno", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data, aes(x = geno, y = lfa, fill = riego)) +
geom_col(position = position_dodge()) +
geom_text(aes(label = round(lfa, 1)), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Geno", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
install.packages("emmeans")
options(repos = c(CRAN = "https://cloud.r-project.org/"))
library(agricolae)
library(agricolae)
# test de Tukey para el factor de riego
tukey_riego <- HSD.test(modelo,"riego", group = TRUE)
print (tukey_riego)
print(tukey_geno)
head(data)
library(readxl)
data <- read_excel("eficiencia de riego papa.xlsx")
head(data)
## Test de Tukey para el factor geno
tukey_geno <- HSD.test(modelo, "geno", group = TRUE)
print(tukey_geno)
## Test de Tukey para el factor geno
tukey_geno <- HSD.test(modelo, "geno", group = TRUE)
print(tukey_geno)
install.packages("ggplot2", repos = "https://cloud.r-project.org/")
library (ggplot2)
ggplot(data, aes(x = block, y = lfa, fill = block)) +
geom_boxplot(outlier.colour = "red", outlier.shape = 16, outlier.size = 2) +  # Personaliza los outliers
geom_jitter(width = 0.2, alpha = 0.5) +  # Añade puntos de datos con un poco de dispersión
labs(title = "Box Plot de lfa por Block", x = "Block", y = "lfa") +
theme_minimal()
## Test de Tukey para el factor geno
tukey_geno <- HSD.test(modelo, "geno", group = TRUE)
print (tukey_geno)
library(agricolae)
# test de Tukey para el factor de riego
tukey_riego <- HSD.test(modelo,"riego", group = TRUE)
print (tukey_riego)
## Test de Tukey para el factor geno
tukey_geno <- HSD.test(modelo, "geno", group = TRUE)
print (tukey_geno)
## Test de Tukey para el factor geno
tukey_geno <- HSD.test(modelo, "geno", group = TRUE)
print(tukey_geno)
## Test de Tukey para el factor geno
tukey_geno <- HSD.test(modelo, "geno", group = TRUE)
print(tukey_geno)
# Verifica los términos del modelo
summary(modelo)
## Test de Tukey para el factor geno
tukey_geno <- HSD.test(modelo, "geno", group = TRUE)
print(tukey_geno)
print(tukey_riego)
# Test de Tukey para el factor 'geno'
tukey_geno <- HSD.test(modelo, "geno", group = TRUE)
print(tukey_geno)
# Test de Tukey para la interacción 'geno:riego'
tukey_interaccion <- HSD.test(modelo, "geno:riego", group = TRUE)
# Test de Tukey para el factor 'riego'
tukey_riego <- HSD.test(modelo, "riego", group = TRUE)
print(tukey_riego)
# Test de Tukey para el factor 'geno'
tukey_geno <- HSD.test(modelo, "geno", group = TRUE)
print(tukey_geno)
# Test de Tukey para la interacción 'geno:riego'
tukey_interaccion <- HSD.test(modelo, "geno:riego", group = TRUE)
print(tukey_interaccion)
# Test de Tukey para el factor 'riego'
tukey_riego <- HSD.test(modelo, "riego", group = TRUE)
print(tukey_riego)
# Test de Tukey para el factor 'geno'
tukey_geno <- HSD.test(modelo, "geno", group = TRUE)
print(tukey_geno)
if (m_creature->GetEntry() == NPC_ASH || m_creature->GetEntry() == NPC_ADA)
{
if (m_uiEventTimer)
{
{
# Test de Tukey para el factor 'riego'
tukey_riego <- HSD.test(modelo, "riego", group = TRUE)
print(tukey_riego)
# Test de Tukey para el factor 'geno'
tukey_geno <- HSD.test(modelo, "geno", group = TRUE)
print(tukey_geno)
if (m_creature->GetEntry() == NPC_ASH || m_creature->GetEntry() == NPC_ADA)
{
// check if the event is already done
library(agricolae)
# test de Tukey para el factor de riego
tukey_riego <- HSD.test(modelo,"riego", group = TRUE)
print (tukey_riego)
library(agricolae)
# test de Tukey para el factor de riego
tukey_riego <- HSD.test(modelo,"riego", group = TRUE)
print (tukey_riego)
# Test de Tukey para el factor geno
tukey_geno <- HSD.test(modelo, "geno", group = TRUE)
print(tukey_geno)
library(readxl)
data <- read_excel("LA MOLINA 2014 POTATO WUE (FB).xlsx", sheet = 2)
library(readxl)
eficiencia_de_riego_papa <- read_excel("eficiencia de riego papa.xlsx")
library(readxl)
eficiencia_de_riego_papa <- read_excel("eficiencia de riego papa.xlsx")
library(readxl)
eficiencia_de_riego_papa <- read_excel("eficiencia de riego papa.xlsx")
library(readxl)
eficiencia_de_riego_papa <- read_excel("eficiencia de riego papa.xlsx")
library(readxl)
eficiencia_de_riego_papa <- read_excel("eficiencia de riego papa.xlsx")
library(readxl)
data <- read_excel("eficiencia de riego papa.xlsx")
library(readxl)
data <- read_excel("eficiencia de riego papa.xlsx")
install.packages("agricolae")
install.packages("agricolae")
options(repos = c(CRAN = "https://cloud.r-project.org/"))
install.packages("agricolae")
library(agricolae)
# test de Tukey para el factor de riego
tukey_riego <- HSD.test(modelo,"riego", group = TRUE)
print (tukey_riego)
# Test de Tukey para el factor geno
tukey_geno <- HSD.test(modelo, "geno", group = TRUE)
print(tukey_geno)
library(emmeans)
# Comparaciones post-hoc para el factor 'geno' usando emmeans
emmeans_geno <- emmeans(modelo, "geno")
# Test de Tukey para el factor geno
tukey_geno <- HSD.test(modelo, "geno", group = TRUE)
print(tukey_geno)
# Asegúrate de que el modelo esté ajustado correctamente con los factores
modelo <- aov(lfa ~ block + riego * geno, data = datos)
# Asegúrate de que el modelo esté ajustado correctamente con los factores
modelo <- aov(lfa ~ block + riego * geno, data ="eficiencia de riego papa.xlsx")
datos$riego <- as.factor(datos$riego)
tukey_geno <- HSD.test(modelo_aov, "geno", group = TRUE)
tukey_geno <- HSD.test(modelo_aov, "geno", group = TRUE)
modelo <- lm(formula = lfa ~ block + geno + riego + riego*geno, data = data)
anova(modelo)
tukey_geno <- HSD.test(modelo_aov, "geno", group = TRUE)
tukey_geno <- HSD.test(modelo_anova, "geno", group = TRUE)
modelo <- lm(formula = lfa ~ block + geno + riego + riego*geno, data = data)
anova(modelo)
# Ajuste del modelo con aov
modelo_aov <- aov(lfa ~ block + geno * riego, data = data)
tukey_geno <- HSD.test(modelo_anova, "geno", group = TRUE)
print(tukey_geno)
modelo <- lm(formula = lfa ~ block + geno + riego + riego*geno, data = data)
anova(modelo)
# Ajuste del modelo con aov
modelo_aov <- aov(lfa ~ block + geno * riego, data = data)
tukey_geno <- HSD.test(modelo_aov, "geno", group = TRUE)
print(tukey_geno)
# Test de Tukey para el factor geno
tukey_geno <- HSD.test(modelo, "geno", group = TRUE)
print(tukey_geno)
# Test de Tukey para el factor geno
tukey_geno <- HSD.test(modelo, "geno", group = TRUE)
print(tukey_geno)
# Test de Tukey para la interacción riego:geno
tukey_interaccion <- HSD.test(modelo,c("riego", "geno"), group = TRUE)
print(tukey_interaccion)
str(tukey_interaccion)
library(tidyverse)
library(dplyr)
library(tidyr)
library(purrr)
library(stringr)
mc <- tukey_interaccion$groups%>%
rownames_to_column("tr at")%>%
separate(`tr at`, c("riego", "geno"))
str(mc)
ggplot(mc, aes(x = geno, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = groups), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
mc <- emmeans(modelo, ~ riego * geno )
mc
mc <- emmeans(modelo, ~ geno | riego )
mc
mc <- emmeans(modelo, ~ riego | geno)
mc
library(emmeans)
library(emmeans)
mc <- emmeans(modelo, ~ riego * geno)
mc <- emmeans(modelo, ~ riego | geno)
mc <- emmeans(modelo, ~ geno | riego) %>%
as.data.frame()
mc
ggplot(mc, aes(x = geno, y = emmean, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = emmean), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(mc, aes(x = geno, y = emmean, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
geom_text(aes(label = emmean), position = position_dodge(0.9), vjust = -0.5) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(mc, aes(x = geno, y = emmean, fill = riego)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(x = "Variedad", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
