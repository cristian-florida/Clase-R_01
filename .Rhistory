str(tukey_result)
tukey_result
modelo_twue <- lm(formula = twue ~ bloque + riego + geno + riego * geno, data = fb)
#Realiza el ANOVA
anova(modelo_twue)
#Realiza la prueba de Tukey para el factor "geno"
tukey_result_geno <- HSD.test(modelo_twue, trt = "geno")
#Realiza la prueba de Tukey para el factor "riego"
tukey_result_riego <- HSD.test(modelo_twue, trt = "riego")
#Muestra los resultados
tukey_result_geno
tukey_result_riego
str(tukey_result)
tukey_result
# Carga el paquete 'agricolae'
if (!require(agricolae)) install.packages("agricolae")
library(agricolae)
# Ajusta el modelo lineal
modelo_twue <- lm(formula = twue ~ bloque + riego + geno + riego * geno, data = fb)
# Realiza el ANOVA
anova(modelo_twue)
# Realiza la prueba de Tukey para el factor "geno"
tukey_result_geno <- HSD.test(modelo_twue, trt = "geno")
# Realiza la prueba de Tukey para el factor "riego"
tukey_result_riego <- HSD.test(modelo_twue, trt = "riego")
# Muestra los resultados
print(tukey_result_geno)
print(tukey_result_riego)
# Revisión de la estructura de los resultados
str(tukey_result_geno)
str(tukey_result_riego)
```{r}
# Carga el paquete 'agricolae'
if (!require(agricolae)) install.packages("agricolae")
library(agricolae)
# Ajusta el modelo lineal
modelo_twue <- lm(formula = twue ~ bloque + riego + geno + riego * geno, data = fb)
# Realiza el ANOVA
anova(modelo_twue)
# Realiza la prueba de Tukey para el factor "geno"
tukey_result_geno <- HSD.test(modelo_twue, trt = "geno")
# Realiza la prueba de Tukey para el factor "riego"
tukey_result_riego <- HSD.test(modelo_twue, trt = "riego")
# Muestra los resultados
print(tukey_result_geno)
print(tukey_result_riego)
# Revisión de la estructura de los resultados
str(tukey_result_geno)
str(tukey_result_riego)
library(tidyverse)
glimpse(tukey_result$groups)
library(dplyr)
library(tidyr)
# Cargar las librerías necesarias
library(dplyr)
library(tidyr)
library(tidyverse)
# Reemplazar 'tukey_result' con 'tukey_result_geno' para acceder al grupo adecuado
glimpse(tukey_result_geno$groups)
# Crear el objeto 'grupos' usando 'tukey_result_geno'
grupos <- tukey_result_geno$groups %>%
rownames_to_column("tratamientos") %>%
separate(tratamientos, into = c("geno", "riego"), sep = ":")
# Verificar la estructura de 'grupos'
str(grupos)
names(grupos)
#Graficamos con ggplot
ggplot(grupos, aes(x = geno, y = lfa, fill = riego)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
geom_text(aes(label = groups, y = lfa + 0.05),
position = position_dodge(width = 0.9),
vjust = 0) +
labs(x = "Genotipo", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Gráfico de barras: LFA por genotipo y riego")
names(grupos)
names(grupos)
#Graficamos con ggplot
ggplot(grupos, aes(x = geno, y = twue, fill = riego)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
geom_text(aes(label = groups, y = lfa + 0.05),
position = position_dodge(width = 0.9),
vjust = 0) +
labs(x = "Genotipo", y = "LFA", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Gráfico de barras: LFA por genotipo y riego")
names(grupos)
# Graficamos con ggplot
ggplot(grupos, aes(x = geno, y = twue, fill = riego)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
geom_text(aes(label = groups, y = twue + 0.05),  # Cambia `lfa` por `twue`
position = position_dodge(width = 0.9),
vjust = 0) +
labs(x = "Genotipo", y = "TWUE", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Gráfico de barras: TWUE por genotipo y riego")
names(grupos)
# Graficamos con ggplot
ggplot(grupos, aes(x = geno, y = twue, fill = riego)) +
geom_bar(stat = "identity", position = "dodge", color = "green") +
geom_text(aes(label = groups, y = twue + 0.05),  # Cambia `lfa` por `twue`
position = position_dodge(width = 0.9),
vjust = 0) +
labs(x = "Genotipo", y = "TWUE", fill = "Riego") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
ggtitle("Gráfico de barras: TWUE por genotipo y riego")
modelo <- lme4::lmer(stemdw ~ (1|bloque) + geno*riego
, data = fb)
anova(modelo)
cm1 <- emmeans(modelo, ~ geno | riego) %>%
cld(Letters = letters, reversed = T)
cm1
cm2 <- emmeans(modelo, ~ riego | geno ) %>%
cld(Letters = letters, reversed = T)
cm2
cm3 <- emmeans(modelo, ~ riego * geno) %>%
cld(Letters = letters, reversed = T)
cm3
library(readxl)
library(readxl)
View(Resultados)
Resultados <- read_excel("Resultados.xlsx")
View(Resultados)
Resultados <- read_excel("Resultados.xlsx"sheet = "Hoja")
Resultados <- read_excel("Resultados.xlsx"sheet = "Hoja 3")
View(Resultados)
Resultados <- read_excel("Resultados.xlsx", sheet = "Hoja 3")
View(Resultados)
Resultados <- read_excel("Resultados.xlsx", sheet = "Hoja3")
View(Resultados)
View(Resumen_de_datos)
Resumen_de_datos <- read_excel("Resumen de datos.xlsx")
View(Resumen_de_datos)
library(tidyverse)
# Renombrar columnas si es necesario (ajusta esto si el nombre de tus variables tiene espacios)
colnames(datos) <- c("variedades", "tratamiento", "fecha", "altura_planta", "num_hojas")
# Renombrar columnas si es necesario (ajusta esto si el nombre de tus variables tiene espacios)
colnames(Resultados) <- c("variedades", "tratamiento", "fecha", "altura_planta", "num_hojas")
# Definir el modelo de MANOVA
modelo_manova <- manova(cbind(altura_planta, num_hojas) ~ variedades * tratamiento, data = datos)
str(datos)
str(Resultados)
# Definir el modelo de MANOVA
modelo_manova <- manova(cbind(altura_planta, num_hojas) ~ variedades * tratamiento, data = Resultados)
# Mostrar el resumen de MANOVA
summary(modelo_manova, test = "Pillai")  # Puedes usar otros tests como "Wilks", "Hotelling-Lawley", "Roy"
str(Resultados)
# Definir el modelo de MANOVA
modelo_manova <- manova(cbind(altura_planta, num_hojas) ~ variedades * tratamiento, data = Resultados)
library(agricolae)
library(agricolae)
datos <- read_excel("Resultados.xlsx", sheet = "Hoja3")
View(Resultados)
library(tidyverse)
library(agricolae)
# Verificar datos
head(datos)
# Realizar el análisis de varianza (ANOVA)
anova_resultado <- aov(y ~ tratamiento, data = datos)
# Ver los resultados del ANOVA
summary(anova_resultado)
# Realizar el análisis de varianza (ANOVA) para la altura de la planta
anova_resultado <- aov(`Altura de planta (cm)` ~ tratamiento, data = datos)
# Verificar los valores únicos de la variable 'Altura de planta (cm)'
unique(datos$`Altura de planta (cm)`)
# Intentar convertir 'Altura de planta (cm)' a formato numérico, gestionando los caracteres no numéricos
datos$`Altura de planta (cm)` <- as.numeric(datos$`Altura de planta (cm)`)
# Verificar si hubo conversiones fallidas (valores NA) en la columna
sum(is.na(datos$`Altura de planta (cm)`))
# Verificar si hubo conversiones fallidas (valores NA) en la columna
sum(is.na(datos$`Altura de planta (cm)`))
# Realizar el análisis de varianza (ANOVA) para la altura de la planta
anova_resultado <- aov(`Altura de planta (cm)` ~ tratamiento, data = datos)
# Ver los resultados del ANOVA
summary(anova_resultado)
# Realizar el análisis de varianza (ANOVA) para la altura de la planta
anova_resultado <- aov(`Altura de planta (cm)` ~ tratamiento, data = datos)
# Realizar la prueba de Tukey para comparar los tratamientos
tukey_resultado <- TukeyHSD(anova_resultado)
# Ver los resultados de la prueba de Tukey
summary(tukey_resultado)
# Convertir las variables de interés a factores si no lo son
datos$variedades <- as.factor(datos$variedades)
datos$tratamiento <- as.factor(datos$tratamiento)
# ANOVA para altura de planta
modelo_altura <- aov(`Altura de planta (cm)` ~ variedades * tratamiento, data = datos)
summary(modelo_altura)
summary(modelo_hojas)
# ANOVA para número de hojas
modelo_hojas <- aov(`N° de hojas` ~ variedades * tratamiento, data = datos)
summary(modelo_hojas)
# Cargar los paquetes necesarios
library(ggplot2)
library(dplyr)
# Asegurarse de que las variables categóricas están como factores
datos$variedades <- as.factor(datos$variedades)
datos$tratamiento <- as.factor(datos$tratamiento)
# Calcular medias e intervalos de error
datos_altura <- datos %>%
group_by(variedades, tratamiento) %>%
summarise(media_altura = mean(`Altura de planta (cm)`),
sd_altura = sd(`Altura de planta (cm)`),
n = n()) %>%
mutate(se_altura = sd_altura / sqrt(n))  # Error estándar
# Graficar
ggplot(datos_altura, aes(x = variedades, y = media_altura, fill = tratamiento)) +
geom_bar(stat = "identity", position = position_dodge(0.8), color = "black") +
geom_errorbar(aes(ymin = media_altura - se_altura, ymax = media_altura + se_altura),
width = 0.2, position = position_dodge(0.8)) +
labs(x = "Variedades", y = "Altura de Planta (cm)", fill = "Tratamiento") +
theme_minimal() +
ggtitle("Altura de Planta por Variedad y Tratamiento") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Graficar
ggplot(datos_altura, aes(x = variedades, y = media_altura, fill = tratamiento)) +
geom_bar(stat = "identity", position = position_dodge(0.8), color = "black") +
geom_errorbar(aes(ymin = media_altura - se_altura, ymax = media_altura + se_altura),
width = 0.2, position = position_dodge(0.8)) +
labs(x = "Variedades", y = "Altura de Planta (cm)", fill = "Tratamiento") +
theme_minimal() +
ggtitle("Altura de Planta por Variedad y Tratamiento") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(datos, aes(x = variedades, y = `Altura de planta (cm)`, fill = tratamiento)) +
geom_boxplot(position = position_dodge(0.8)) +
labs(x = "Variedades", y = "Altura de Planta (cm)", fill = "Tratamiento") +
theme_minimal() +
ggtitle("Distribución de la Altura de Planta por Variedad y Tratamiento") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(datos, aes(x = variedades, y = `N° de hojas`, fill = tratamiento)) +
geom_boxplot(position = position_dodge(0.8)) +
labs(x = "Variedades", y = "Número de Hojas", fill = "Tratamiento") +
theme_minimal() +
ggtitle("Distribución del Número de Hojas por Variedad y Tratamiento") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Convertir las variables de interés a factores si no lo son
datos$variedades <- as.factor(datos$variedades)
datos$tratamiento <- as.factor(datos$tratamiento)
# ANOVA para altura de planta
modelo_altura <- aov(`Altura de planta (cm)` ~ variedades * tratamiento, data = datos)
summary(modelo_altura)
# ANOVA para número de hojas
modelo_hojas <- aov(`N° de hojas` ~ variedades * tratamiento, data = datos)
summary(modelo_hojas)
# Asegurarse de que las variables categóricas están como factores
datos$variedades <- as.factor(datos$variedades)
datos$tratamiento <- as.factor(datos$tratamiento)
# Calcular medias e intervalos de error
datos_altura <- datos %>%
group_by(variedades, tratamiento) %>%
summarise(media_altura = mean(`Altura de planta (cm)`),
sd_altura = sd(`Altura de planta (cm)`),
n = n()) %>%
mutate(se_altura = sd_altura / sqrt(n))  # Error estándar
# Graficar
ggplot(datos_altura, aes(x = variedades, y = media_altura, fill = tratamiento)) +
geom_bar(stat = "identity", position = position_dodge(0.8), color = "black") +
geom_errorbar(aes(ymin = media_altura - se_altura, ymax = media_altura + se_altura),
width = 0.2, position = position_dodge(0.8)) +
labs(x = "Variedades", y = "Altura de Planta (cm)", fill = "Tratamiento") +
theme_minimal() +
ggtitle("Altura de Planta por Variedad y Tratamiento") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(datos, aes(x = variedades, y = `Altura de planta (cm)`, fill = tratamiento)) +
geom_boxplot(position = position_dodge(0.8)) +
labs(x = "Variedades", y = "Altura de Planta (cm)", fill = "Tratamiento") +
theme_minimal() +
ggtitle("Distribución de la Altura de Planta por Variedad y Tratamiento") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Graficar
ggplot(datos_altura, aes(x = variedades, y = media_altura, fill = tratamiento)) +
geom_bar(stat = "identity", position = position_dodge(0.8), color = "black") +
geom_errorbar(aes(ymin = media_altura - se_altura, ymax = media_altura + se_altura),
width = 0.2, position = position_dodge(0.8)) +
labs(x = "Variedades", y = "Altura de Planta (cm)", fill = "Tratamiento") +
theme_minimal() +
ggtitle("Altura de Planta por Variedad y Tratamiento") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(datos, aes(x = variedades, y = `Altura de planta (cm)`, fill = tratamiento)) +
geom_boxplot(position = position_dodge(0.8)) +
labs(x = "Variedades", y = "Altura de Planta (cm)", fill = "Tratamiento") +
theme_minimal() +
ggtitle("Distribución de la Altura de Planta por Variedad y Tratamiento") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
# Graficar
ggplot(datos_altura, aes(x = variedades, y = media_altura, fill = tratamiento)) +
geom_bar(stat = "identity", position = position_dodge(0.8), color = "black") +
geom_errorbar(aes(ymin = media_altura - se_altura, ymax = media_altura + se_altura),
width = 0.2, position = position_dodge(0.8)) +
labs(x = "Variedades", y = "Altura de Planta (cm)", fill = "Tratamiento") +
theme_minimal() +
ggtitle("Altura de Planta por Variedad y Tratamiento") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(datos, aes(x = variedades, y = `Altura de planta (cm)`, fill = tratamiento)) +
geom_boxplot(position = position_dodge(0.8)) +
labs(x = "Variedades", y = "Altura de Planta (cm)", fill = "Tratamiento") +
theme_minimal() +
ggtitle("Distribución de la Altura de Planta por Variedad y Tratamiento") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(datos, aes(x = variedades, y = `Altura de planta (cm)`, fill = tratamiento)) +
geom_boxplot(position = position_dodge(0.8)) +
labs(x = "Variedades", y = "Altura de Planta (cm)", fill = "Tratamiento") +
theme_minimal() +
ggtitle("Distribución de la Altura de Planta por Variedad y Tratamiento") +
theme(axis.text.x = element_text(angle = 45, hjust = 2))
ggplot(datos, aes(x = variedades, y = `Altura de planta (cm)`, fill = tratamiento)) +
geom_boxplot(position = position_dodge(1)) +
labs(x = "Variedades", y = "Altura de Planta (cm)", fill = "Tratamiento") +
theme_minimal() +
ggtitle("Distribución de la Altura de Planta por Variedad y Tratamiento") +
theme(axis.text.x = element_text(angle = 45, hjust = 2))
ggplot(datos, aes(x = variedades, y = `Altura de planta (cm)`, fill = tratamiento)) +
geom_boxplot(position = position_dodge(5)) +
labs(x = "Variedades", y = "Altura de Planta (cm)", fill = "Tratamiento") +
theme_minimal() +
ggtitle("Distribución de la Altura de Planta por Variedad y Tratamiento") +
theme(axis.text.x = element_text(angle = 45, hjust = 2))
ggplot(datos, aes(x = variedades, y = `Altura de planta (cm)`, fill = tratamiento)) +
geom_boxplot(position = position_dodge(1)) +
labs(x = "Variedades", y = "Altura de Planta (cm)", fill = "Tratamiento") +
theme_minimal() +
ggtitle("Distribución de la Altura de Planta por Variedad y Tratamiento") +
theme(axis.text.x = element_text(angle = 45, hjust = 5))
ggplot(datos, aes(x = variedades, y = `Altura de planta (cm)`, fill = tratamiento)) +
geom_boxplot(position = position_dodge(1)) +
labs(x = "Variedades", y = "Altura de Planta (cm)", fill = "Tratamiento") +
theme_minimal() +
ggtitle("Distribución de la Altura de Planta por Variedad y Tratamiento") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(datos, aes(x = variedades, y = `N° de hojas`, fill = tratamiento)) +
geom_boxplot(position = position_dodge(0.8)) +
labs(x = "Variedades", y = "Número de Hojas", fill = "Tratamiento") +
theme_minimal() +
ggtitle("Distribución del Número de Hojas por Variedad y Tratamiento") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(readxl)
Lee el archivo y selecciona la hoja deseada
Resumen_de_datos <- read_excel("Resumen de datos.xlsx")
View(Resumen_de_datos)
Resumen_de_datos <- read_excel("Resumen de datos.xlsx")
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
install.packages("multcomp")  # Para el test de Tukey
install.packages("multcomp")
library(dplyr)
library(ggplot2)
library(multcomp)
# Crear el DataFrame con los datos
data <- data.frame(
Tratamiento = rep(c("cb", "sb"), each = 16),
tp = c(16.5, 19, 16, 17.5, 17.5, 19.5, 21, 22,
17.4, 14.5, 16, 18.7, 15, 14.5, 15.9, 16,
28, 35, 30.3, 28.1, 31.5, 31.4, 32.4, 36.8,
24, 26.4, 29.4, 25.4, 24.4, 23, 30.7, 33.2)
)
# Realizar el ANOVA
anova_result <- aov(tp ~ Tratamiento, data = data)
summary(anova_result)
# Realizar el Test de Tukey
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)
# Visualizar los resultados (opcional)
ggplot(data, aes(x = Tratamiento, y = tp)) +
geom_boxplot() +
labs(title = "Comparación de Tratamientos", x = "Tratamiento", y = "tp") +
theme_minimal()
# Realizar el ANOVA
anova_result <- aov(tp ~ Tratamiento, data = data)
summary(anova_result)
# Realizar el ANOVA
anova_result <- aov(tp ~ Tratamiento, data = Resumen_de_datos)
summary(anova_result)
# Realizar el Test de Tukey
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)
# Visualizar los resultados (opcional)
ggplot(data, aes(x = Tratamiento, y = tp)) +
geom_boxplot() +
labs(title = "Comparación de Tratamientos", x = "Tratamiento", y = "tp") +
theme_minimal())
# Visualizar los resultados (opcional)
ggplot(Resumen_de_datos, aes(x = Tratamiento, y = tp)) +
geom_boxplot() +
labs(title = "Comparación de Tratamientos", x = "Tratamiento", y = "tp") +
theme_minimal())
# Visualizar los resultados (opcional)
ggplot(Resumen_de_datos, aes(x = Tratamiento, y = tp)) +
geom_boxplot() +
labs(title = "Comparación de Tratamientos", x = "Tratamiento", y = "tp") +
theme_minimal())
summary(anova_result)
summary(anova_result)
# Anova de Numero de macollos
anova_result <- aov(nm ~ Tratamiento, data = Resumen_de_datos)
summary(anova_result)
# Realizar el Test de Tukey de tamaño de plantas
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)
# Realizar el ANOVA tamaño de planta
anova_tp <- aov(tp ~ Tratamiento, data = Resumen_de_datos)
summary(anova_result)
summary(anova_result)
summary(anova_result)
print(tukey_result)
print(tukey_result)
print(tukey_result)
# Convertir los datos a formato largo para facilitar el uso de ggplot2
library(tidyr)
# Convertir el DataFrame a formato largo
data_long <- Resumen_de_datos %>%
pivot_longer(cols = c(tp, nh, nm), names_to = "Variable", values_to = "Valor")
# Crear el gráfico
ggplot(data_long, aes(x = Tratamiento, y = Valor, fill = Tratamiento)) +
geom_boxplot() +
facet_wrap(~ Variable, scales = "free_y") +
labs(title = "Comparación de Variables por Tratamiento",
x = "Tratamiento",
y = "Valor") +
theme_minimal()
summary(anova_result)
# Realizar el ANOVA para cada variable
anova_tp <- aov(tp ~ Tratamiento, data = Resumen_de_datos)
anova_nh <- aov(nh ~ Tratamiento, data = Resumen_de_datos)
anova_nm <- aov(nm ~ Tratamiento, data = Resumen_de_datos)
# Mostrar los resúmenes de ANOVA
summary(anova_tp)
summary(anova_nh)
summary(anova_nm)
# Realizar el análisis de Tukey para cada variable
tukey_tp <- TukeyHSD(anova_tp)
tukey_nh <- TukeyHSD(anova_nh)
tukey_nm <- TukeyHSD(anova_nm)
# Imprimir los resultados de Tukey
print(tukey_tp)
print(tukey_nh)
print(tukey_nm)
Resumen_de_datos <- read_excel("Resumen de datos.xlsx")
View(Resumen_de_datos)
Resumen_de_datos <- read_excel("Resumen de datos.xlsx")
View(Resumen_de_datos)
library(agricolae)
# Realizar el ANOVA tamaño de planta
anova_tp <- aov(tp ~ Tratamiento, data = Resumen_de_datos)
# Realizar el ANOVA tamaño de planta
anova_tp <- aov(tp ~ Tratamiento, data = Resumen_de_datos)
summary(anova_result)
# Anova de Numero de hojas
anova_nh <- aov(nh ~ Tratamiento, data = Resumen_de_datos)
summary(anova_result)
# Anova de Numero de macollos
anova_nm <- aov(nm ~ Tratamiento, data = Resumen_de_datos)
summary(anova_result)
#  de Tukey de tamaño de plantas
tukey_tp <- TukeyHSD(anova_result)
print(tukey_result)
#de Tukey para n´mero de hojas
tukey_nh <- TukeyHSD(anova_result)
print(tukey_result)
#de Tukey para n´mero de macollos
tukey_nm <- TukeyHSD(anova_result)
print(tukey_result)
# Visualizar los resultados (opcional)
ggplot(Resumen_de_datos, aes(x = Tratamiento, y = tp)) +
geom_boxplot() +
labs(title = "Comparación de Tratamientos", x = "Tratamiento", y = "tp") +
theme_minimal())
# Convertir los datos a formato largo para facilitar el uso de ggplot2
library(tidyr)
# Convertir el DataFrame a formato largo
data_long <- Resumen_de_datos %>%
pivot_longer(cols = c(tp, nh, nm), names_to = "Variable", values_to = "Valor")
# Crear el gráfico
ggplot(data_long, aes(x = Tratamiento, y = Valor, fill = Tratamiento)) +
geom_boxplot() +
facet_wrap(~ Variable, scales = "free_y") +
labs(title = "Comparación de Variables por Tratamiento",
x = "Tratamiento",
y = "Valor") +
theme_minimal()
# Realizar el ANOVA para cada variable
anova_tp <- aov(tp ~ Tratamiento, data = Resumen_de_datos)
# Realizar el ANOVA para cada variable
anova_tp <- aov(tp ~ Tratamiento, data = Resumen_de_datos)
anova_nh <- aov(nh ~ Tratamiento, data = Resumen_de_datos)
anova_nm <- aov(nm ~ Tratamiento, data = Resumen_de_datos)
# Mostrar los resúmenes de ANOVA
summary(anova_tp)
summary(anova_nh)
summary(anova_nm)
# Realizar el análisis de Tukey para cada variable
tukey_tp <- TukeyHSD(anova_tp)
tukey_nh <- TukeyHSD(anova_nh)
tukey_nm <- TukeyHSD(anova_nm)
# Imprimir los resultados de Tukey
print(tukey_tp)
print(tukey_nh)
# Realizar el ANOVA para cada variable
anova_tp <- aov(tp ~ Tratamiento, data = Resumen_de_datos)
anova_nh <- aov(nh ~ Tratamiento, data = Resumen_de_datos)
anova_nm <- aov(nm ~ Tratamiento, data = Resumen_de_datos)
# Mostrar los resúmenes de ANOVA
summary(anova_tp)
summary(anova_nh)
summary(anova_nm)
