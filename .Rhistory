# Realizar el análisis de Tukey para cada variable
tukey_tp <- TukeyHSD(anova_tp)
tukey_nh <- TukeyHSD(anova_nh)
tukey_nm <- TukeyHSD(anova_nm)
# Imprimir los resultados de Tukey
print(tukey_tp)
print(tukey_nh)
# Realizar el ANOVA para cada variable
anova_tp <- aov(tp ~ Tratamiento, data = Resumen_de_datos)
anova_nh <- aov(nh ~ Tratamiento, data = Resumen_de_datos)
anova_nm <- aov(nm ~ Tratamiento, data = Resumen_de_datos)
# Mostrar los resúmenes de ANOVA
summary(anova_tp)
summary(anova_nh)
summary(anova_nm)
library(readxl)
Lee el archivo y selecciona la hoja deseada
Resumen_de_datos <- read_excel("Resumen de datos.xlsx")
View(Resumen_de_datos)
library(agricolae)
# Realizar el ANOVA tamaño de planta
anova_tp <- aov(tp ~ Tratamiento, data = Resumen_de_datos)
summary(anova_result)
# Anova de Numero de hojas
anova_nh <- aov(nh ~ Tratamiento, data = Resumen_de_datos)
# Realizar el ANOVA tamaño de planta
anova_tp <- aov(tp ~ Tratamiento, data = Resumen_de_datos)
summary(anova_result)
# Anova de Numero de hojas
anova_nh <- aov(nh ~ Tratamiento, data = Resumen_de_datos)
summary(anova_result)
# Anova de Numero de macollos
anova_nm <- aov(nm ~ Tratamiento, data = Resumen_de_datos)
summary(anova_result)
#  de Tukey de tamaño de plantas
tukey_tp <- TukeyHSD(anova_result)
print(tukey_result)
#de Tukey para n´mero de hojas
tukey_nh <- TukeyHSD(anova_result)
print(tukey_result)
#de Tukey para n´mero de macollos
tukey_nm <- TukeyHSD(anova_result)
print(tukey_result)
# Convertir los datos a formato largo para facilitar el uso de ggplot2
library(tidyr)
# Mostrar los resúmenes de ANOVA
summary(anova_tp)
# Realizar el análisis de Tukey para cada variable
tukey_tp <- TukeyHSD(anova_tp)
# Imprimir los resultados de Tukey
print(tukey_tp)
# Cargar el script desde inkaverse
source('https://inkaverse.com/setup.r')
# URL de la hoja de cálculo de Google Sheets
url <- "https://docs.google.com/spreadsheets/d/15r7ZwcZZHbEgltlF6gSFvCTFA-CFzVBWwg3mFlRyKPs/edit?gid=172957346#gid=172957346"
gs <- as_sheets_id(url)
fb <- gs %>%
range_read("fb")
View(fb)
1# Mostrar la estructura de 'fb'
str(fb)
library(psych)
fb %>%
select_if(is.numeric) %>%
dplyr::select(!c("block")) %>%
pairs.panels(x = .
, hist.col="red"
, pch = 21
, stars = TRUE
, scale = FALSE
, lm = TRUE
)
library(FactoMineR)
mv <- fb %>%
group_by(riego, geno) %>%
summarise(across(where(is.numeric), ~ mean(., na.rm = TRUE))) %>%
PCA(scale.unit = T, quali.sup = c(1:4), graph = F)
p1 <- plot(mv
, choix="ind"
, habillage=1
, label = "ind"
)
p2 <- plot(mv
, choix="var")
list(p1, p2) %>%
plot_grid(plotlist = ., nrow = 1)
[*] --> SeleccionUnidadesAnalisis : Inicio
state SeleccionUnidadesAnalisis {
reticulate::repl_python()
reticulate::repl_python()
# Instalar los paquetes necesarios (si no están instalados)
if (!require("readxl")) install.packages("readxl")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("dplyr")) install.packages("dplyr")
# Cargar los paquetes
library(readxl)
library(ggplot2)
library(dplyr)
# Leer el archivo Excel
ruta_archivo <- "ruta/del/archivo.xlsx"  # Cambia esto por la ruta de tu archivo
library(readxl)
Data_de_EFICIENCIA_DE_SUSTRATOS_GERMINACIÓN_DE_LEGUMINOSAS <- read_excel("~/Data de EFICIENCIA DE SUSTRATOS GERMINACIÓN DE LEGUMINOSAS.xlsx")
View(Data_de_EFICIENCIA_DE_SUSTRATOS_GERMINACIÓN_DE_LEGUMINOSAS)
View(Data_de_EFICIENCIA_DE_SUSTRATOS_GERMINACIÓN_DE_LEGUMINOSAS)
hojas <- excel_sheets(Data_de_EFICIENCIA_DE_SUSTRATOS_GERMINACIÓN_DE_LEGUMINOSAS)
hojas <- excel_sheets("~/Data de EFICIENCIA DE SUSTRATOS GERMINACIÓN DE LEGUMINOSAS.xlsx")
print(hojas)  # Imprime los nombres de las hoja
# Leer ambas hojas
datos_hoja1 <- read_excel("~/Data de EFICIENCIA DE SUSTRATOS GERMINACIÓN DE LEGUMINOSAS.xlsx", sheet = hojas[1])  # Primera hoja
datos_hoja2 <- read_excel("~/Data de EFICIENCIA DE SUSTRATOS GERMINACIÓN DE LEGUMINOSAS.xlsx", sheet = hojas[2])  # Segunda hoja
# Mostrar las primeras filas de cada hoja
print(head(datos_hoja1))
print(head(datos_hoja2))
# Realizar el análisis ANOVA
modelo 1 <- aov(respuesta ~ tratamiento, data = datos_hoja1)
modelo 2 <- aov(respuesta ~ tratamiento, data = datos_hoja2)
library(agricolae)
# Realizar el análisis ANOVA
modelo 1 <- aov(respuesta ~ tratamiento, data = datos_hoja1)
modelo 2 <- aov(respuesta ~ tratamiento, data = datos_hoja2)
# Realizar el análisis ANOVA
modelo 1 <- aov(respuesta ~ tratamiento, data = datos_hoja1)
# Realizar el análisis ANOVA
modelo1 <- aov(Dia_1 ~ Tratamiento, data = datos_hoja1)
summary(modelo1)
# Realizar el análisis ANOVA
modelo1 <- aov(Dia_ ~ Tratamiento, data = datos_hoja1)
summary(modelo1)
modelo 2 <- aov(variedades ~ tratamiento ~ sustratos ~ Altura de plantas, data = datos_hoja2)
modelo2 <- aov(`Altura de planta (cm)` ~ variedades + tratamiento * sustratos, data = datos_hoja2)
summary(modelo2)
# Calcular medias y errores estándar
resumen <-  datos_hoja1%>%
group_by(tratamiento) %>%
summarise(
media = mean(respuesta, na.rm = TRUE),
sd = sd(respuesta, na.rm = TRUE),
n = n(),
se = sd / sqrt(n)
)
# Calcular medias y errores estándar
# Verifica los nombres de las columnas
names(datos_hoja2)
# Asegúrate de que 'Tratamiento' sea un factor
datos_hoja2$Tratamiento <- as.factor(datos_hoja2$Tratamiento)
# Cálculo de medias y errores estándar
resumen <- datos_hoja2 %>%
group_by(Tratamiento) %>%
summarise(
media = mean(`Altura de planta (cm)` ~ variedades + tratamiento * sustratos, na.rm = TRUE),  # Ajusta "Dia_1" a tu variable cuantitativa
sd = sd(`Altura de planta (cm)` ~ variedades + tratamiento * sustratos, na.rm = TRUE),
n = n(),
se = sd / sqrt(n)
)
print(resumen)
library(dplyr)
# Verificar los nombres de las columnas
names(datos_hoja2)
# Convertir 'tratamiento' a factor
datos_hoja2$tratamiento <- as.factor(datos_hoja2$tratamiento)
# Asegurarte de que la variable numérica está correcta
datos_hoja2$`Altura de planta (cm)` <- as.numeric(datos_hoja2$`Altura de planta (cm)`)
# Calcular medias y errores estándar
resumen <- datos_hoja2 %>%
group_by(tratamiento) %>%  # Agrupar por tratamiento
summarise(
media = mean(`Altura de planta (cm)`, na.rm = TRUE),
sd = sd(`Altura de planta (cm)`, na.rm = TRUE),
n = n(),
se = sd / sqrt(n)
)
# Mostrar el resumen
print(resumen)
# Mostrar el resumen
print(resumen)
# Calcular medias y errores estándar
resumen <- datos_hoja2 %>%
group_by(tratamiento) %>%  # Agrupar por tratamiento
summarise(
media = mean(`Altura de planta (cm)`, na.rm = TRUE),
sd = sd(`Altura de planta (cm)`, na.rm = TRUE),
n = n(),
se = sd / sqrt(n)
)
# Crear el gráfico
ggplot(resumen, aes(x = tratamiento, y = media, fill = tratamiento)) +
geom_bar(stat = "identity", position = "dodge", color = "black") + # Barras
geom_errorbar(aes(ymin = media - se, ymax = media + se), width = 0.2, color = "black") + # Errores estándar
labs(
title = "Altura de planta por tratamiento con error estándar",
x = "Tratamiento",
y = "Altura de planta (cm)"
) +
scale_fill_manual(values = c("lightgreen", "lightblue", "lightcoral")) + # Colores personalizados
theme_minimal(base_size = 14)
# Instalar los paquetes necesarios (si no están instalados)
if (!require("readxl")) install.packages("readxl")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("dplyr")) install.packages("dplyr")
# Cargar los paquetes
library(readxl)
library(ggplot2)
library(dplyr)
library(agricolae)
# Leer el archivo Excel
Data_de_EFICIENCIA_DE_SUSTRATOS_GERMINACIÓN_DE_LEGUMINOSAS <- read_excel("~/Data de EFICIENCIA DE SUSTRATOS GERMINACIÓN DE LEGUMINOSAS.xlsx")
View(Data_de_EFICIENCIA_DE_SUSTRATOS_GERMINACIÓN_DE_LEGUMINOSAS)
hojas <- excel_sheets("~/Data de EFICIENCIA DE SUSTRATOS GERMINACIÓN DE LEGUMINOSAS.xlsx")
print(hojas)  # Imprime los nombres de las hoja
# Leer ambas hojas
datos_hoja1 <- read_excel("~/Data de EFICIENCIA DE SUSTRATOS GERMINACIÓN DE LEGUMINOSAS.xlsx", sheet = hojas[1])  # Primera hoja
datos_hoja2 <- read_excel("~/Data de EFICIENCIA DE SUSTRATOS GERMINACIÓN DE LEGUMINOSAS.xlsx", sheet = hojas[2])  # Segunda hoja
# Mostrar las primeras filas de cada hoja
print(head(datos_hoja1))
print(head(datos_hoja2))
# Realizar el análisis ANOVA
modelo1 <- aov(Dia_ ~ Tratamiento, data = datos_hoja1)
summary(modelo1)
modelo2 <- aov(`Altura de planta (cm)` ~ variedades + tratamiento * sustratos, data = datos_hoja2)
summary(modelo2)
# Calcular medias y errores estándar
# Verifica los nombres de las columnas
names(datos_hoja2)
library(dplyr)
# Verificar los nombres de las columnas
names(datos_hoja2)
# Convertir 'tratamiento' a factor
datos_hoja2$tratamiento <- as.factor(datos_hoja2$tratamiento)
# Asegurarte de que la variable numérica está correcta
datos_hoja2$`Altura de planta (cm)` <- as.numeric(datos_hoja2$`Altura de planta (cm)`)
# Calcular medias y errores estándar
resumen <- datos_hoja2 %>%
group_by(tratamiento) %>%  # Agrupar por tratamiento
summarise(
media = mean(`Altura de planta (cm)`, na.rm = TRUE),
sd = sd(`Altura de planta (cm)`, na.rm = TRUE),
n = n(),
se = sd / sqrt(n)
)
# Mostrar el resumen
print(resumen)
# Asegurarte de que los datos están listos
datos_hoja2$tratamiento <- as.factor(datos_hoja2$tratamiento)
datos_hoja2$`Altura de planta (cm)` <- as.numeric(datos_hoja2$`Altura de planta (cm)`)
# Calcular medias y errores estándar
resumen <- datos_hoja2 %>%
group_by(tratamiento) %>%  # Agrupar por tratamiento
summarise(
media = mean(`Altura de planta (cm)`, na.rm = TRUE),
sd = sd(`Altura de planta (cm)`, na.rm = TRUE),
n = n(),
se = sd / sqrt(n)
)
# Crear el gráfico
ggplot(resumen, aes(x = tratamiento, y = media, fill = tratamiento)) +
geom_bar(stat = "identity", position = "dodge", color = "black") + # Barras
geom_errorbar(aes(ymin = media - se, ymax = media + se), width = 0.2, color = "black") + # Errores estándar
labs(
title = "Altura de planta por tratamiento con error estándar",
x = "Tratamiento",
y = "Altura de planta (cm)"
) +
scale_fill_manual(values = c("lightgreen", "lightblue", "lightcoral")) + # Colores personalizados
theme_minimal(base_size = 14)
# Crear el gráfico
ggplot(resumen, aes(x = variedades, y = media, fill = tratamiento)) +
geom_bar(stat = "identity", position = "dodge", color = "black") + # Barras
geom_errorbar(aes(ymin = media - se, ymax = media + se), width = 0.2, color = "black") + # Errores estándar
labs(
title = "Altura de planta por tratamiento con error estándar",
x = "Tratamiento",
y = "Altura de planta (cm)"
) +
scale_fill_manual(values = c("lightgreen", "lightblue", "lightcoral")) + # Colores personalizados
theme_minimal(base_size = 14)
# Crear el gráfico
ggplot(resumen, aes(x = variedades, y = media, fill = variedades)) +
geom_bar(stat = "identity", position = "dodge", color = "black") + # Barras
geom_errorbar(aes(ymin = media - se, ymax = media + se), width = 0.2, color = "black") + # Errores estándar
labs(
title = "Altura de planta por tratamiento con error estándar",
x = "Tratamiento",
y = "Altura de planta (cm)"
) +
scale_fill_manual(values = c("lightgreen", "lightblue", "lightcoral")) + # Colores personalizados
theme_minimal(base_size = 14)
ggplot(resumen, aes(x = tratamiento, y = media, fill = tratamiento)) +
ggplot(resumen, aes(x = tratamiento, y = media, fill = tratamiento)) +
resumen <- data.frame(
variedades = c("A", "B", "C"),
media = c(50, 55, 60),
se = c(2, 3, 2.5)
)
resumen <- data.frame(
variedades = c("A", "B", "C"),
media = c(50, 55, 60),
se = c(2, 3, 2.5)
)
# Crear el gráfico
ggplot(resumen, aes(x = tratamiento, y = media, fill = tratamiento)) +
geom_bar(stat = "identity", position = "dodge", color = "black") + # Barras
geom_errorbar(aes(ymin = media - se, ymax = media + se), width = 0.2, color = "black") + # Errores estándar
labs(
title = "Altura de planta por tratamiento con error estándar",
x = "Tratamiento",
y = "Altura de planta (cm)"
) +
scale_fill_manual(values = c("lightgreen", "lightblue", "lightcoral")) + # Colores personalizados
theme_minimal(base_size = 14)
# Calcular medias y errores estándar
resumen <- datos_hoja2 %>%
group_by(tratamiento) %>%  # Agrupar por tratamiento
summarise(
media = mean(`Altura de planta (cm)`, na.rm = TRUE),
sd = sd(`Altura de planta (cm)`, na.rm = TRUE),
n = n(),
se = sd / sqrt(n)
)
# Crear el gráfico
ggplot(resumen, aes(x = tratamiento, y = media, fill = tratamiento)) +
geom_bar(stat = "identity", position = "dodge", color = "black") + # Barras
geom_errorbar(aes(ymin = media - se, ymax = media + se), width = 0.2, color = "black") + # Errores estándar
labs(
title = "Altura de planta por tratamiento con error estándar",
x = "Tratamiento",
y = "Altura de planta (cm)"
) +
scale_fill_manual(values = c("lightgreen", "lightblue", "lightcoral")) + # Colores personalizados
theme_minimal(base_size = 14)
# Leer el archivo Excel
Data_de_EFICIENCIA_DE_SUSTRATOS_GERMINACIÓN_DE_LEGUMINOSAS <- read_excel("~/Data de EFICIENCIA DE SUSTRATOS GERMINACIÓN DE LEGUMINOSAS.xlsx")
View(Data_de_EFICIENCIA_DE_SUSTRATOS_GERMINACIÓN_DE_LEGUMINOSAS)
hojas <- excel_sheets("~/Data de EFICIENCIA DE SUSTRATOS GERMINACIÓN DE LEGUMINOSAS.xlsx")
print(hojas)  # Imprime los nombres de las hoja
# Leer ambas hojas
datos_hoja1 <- read_excel("~/Data de EFICIENCIA DE SUSTRATOS GERMINACIÓN DE LEGUMINOSAS.xlsx", sheet = hojas[1])  # Primera hoja
datos_hoja2 <- read_excel("~/Data de EFICIENCIA DE SUSTRATOS GERMINACIÓN DE LEGUMINOSAS.xlsx", sheet = hojas[2])  # Segunda hoja
# Mostrar las primeras filas de cada hoja
print(head(datos_hoja1))
print(head(datos_hoja2))
library(dplyr)
resumen <- datos_hoja2 %>%
group_by(sustratos, variedades) %>%  # Agrupar por sustratos y variedades
summarise(
media = mean(`Altura de planta (cm)`, na.rm = TRUE),
sd = sd(`Altura de planta (cm)`, na.rm = TRUE),
n = n(),
se = sd / sqrt(n),
.groups = 'drop'
)
library(ggplot2)
ggplot(resumen, aes(x = variedades, y = media, fill = sustratos)) +
geom_bar(stat = "identity", position = "dodge", color = "black") + # Barras agrupadas
geom_errorbar(
aes(ymin = media - se, ymax = media + se),
position = position_dodge(0.9),
width = 0.2,
color = "black"
) +
labs(
title = "Altura de planta por sustrato y variedad con error estándar",
x = "Variedades",
y = "Altura de planta (cm)"
) +
scale_fill_brewer(palette = "Pastel1") + # Escala de colores para los sustratos
theme_minimal(base_size = 14)
ggplot(resumen, aes(x = variedades, y = media, fill = sustratos)) +
geom_bar(stat = "identity", position = "dodge", color = "black") + # Barras agrupadas
geom_errorbar(
aes(ymin = media - se, ymax = media + se),
position = position_dodge(0.9),
width = 0.2,
color = "green"
) +
labs(
title = "Altura de planta por sustrato y variedad con error estándar",
x = "Variedades",
y = "Altura de planta (cm)"
) +
scale_fill_brewer(palette = "Pastel1") + # Escala de colores para los sustratos
theme_minimal(base_size = 14)
datos_hoja2$`Altura de planta (cm)` <- as.numeric(datos_hoja2$`Altura de planta (cm)`)
print(datos_problemas)
# Agrupar y calcular estadísticas
resumen <- datos_hoja2 %>%
group_by(sustratos, variedades) %>%
summarise(
media = mean(`Altura de planta (cm)`, na.rm = TRUE),
sd = sd(`Altura de planta (cm)`, na.rm = TRUE),
n = n(),
se = sd / sqrt(n),
.groups = 'drop'
)
# Crear el gráfico
ggplot(resumen, aes(x = variedades, y = media, fill = sustratos)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
geom_errorbar(
aes(ymin = media - se, ymax = media + se),
position = position_dodge(0.9),
width = 0.2,
color = "black"
) +
labs(
title = "Altura de planta por sustrato y variedad con error estándar",
x = "Variedades",
y = "Altura de planta (cm)"
) +
scale_fill_brewer(palette = "Pastel1") +
theme_minimal(base_size = 14)
# Agrupar y calcular estadísticas
resumen <- datos_hoja2 %>%
group_by(sustratos, variedades) %>%
summarise(
media = mean(`N° de hojas`, na.rm = TRUE),
sd = sd(`N° de hojas (cm)`, na.rm = TRUE),
n = n(),
se = sd / sqrt(n),
.groups = 'drop'
)
# Agrupar y calcular estadísticas
resumen <- datos_hoja2 %>%
group_by(sustratos, variedades) %>%
summarise(
media = mean(`N° de hojas`, na.rm = TRUE),  # Nombre correcto
sd = sd(`N° de hojas`, na.rm = TRUE),      # Nombre correcto
n = n(),
se = sd / sqrt(n),
.groups = 'drop'
)
ggplot(resumen, aes(x = variedades, y = media, fill = sustratos)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
geom_errorbar(
aes(ymin = media - se, ymax = media + se),
position = position_dodge(0.9),
width = 0.2,
color = "black"
) +
labs(
title = "Número de hojas por sustrato y variedad con error estándar",
x = "Variedades",
y = "Número de hojas"
) +
scale_fill_brewer(palette = "Pastel1") +
theme_minimal(base_size = 14)
# Transformar datos a formato largo
datos_largo <- datos %>%
pivot_longer(
cols = starts_with("Dia_"),
names_to = "Día",
names_prefix = "Dia_",
values_to = "Valor"
) %>%
mutate(Día = as.numeric(Día))  # Convertir Día a numérico para el eje X
# Calcular estadísticas por grupo
resumen <- datos_largo %>%
group_by(sustratos, variedades, Día) %>%
summarise(
media = mean(Valor, na.rm = TRUE),
sd = sd(Valor, na.rm = TRUE),
n = n(),
se = sd / sqrt(n),
.groups = 'drop'
)
# Crear el gráfico
ggplot(resumen, aes(x = Día, y = media, color = variedades, group = variedades)) +
geom_line(size = 1) +  # Línea para cada variedad
geom_point(size = 3) +  # Puntos en cada día
geom_errorbar(
aes(ymin = media - se, ymax = media + se),
width = 0.2,
size = 0.8
) +
facet_wrap(~ sustratos) +  # Crear paneles por sustratos
labs(
title = "Evolución del crecimiento por día, variedad y sustrato",
x = "Día",
y = "Promedio del valor"
) +
theme_minimal(base_size = 14) +
scale_color_brewer(palette = "Set1")  # Paleta de colores para variedades
# Transformar datos a formato largo
datos_largo <- datos_hoja1 %>%
pivot_longer(
cols = starts_with("Dia_"),
names_to = "Día",
names_prefix = "Dia_",
values_to = "Valor"
) %>%
mutate(Día = as.numeric(Día))  # Convertir Día a numérico para el eje X
library(ggplot2)
# Transformar datos a formato largo
> # Transformar datos a formato largo
library(ggplot2)
> # Transformar datos a formato largo
Error en pivot_longer(., cols = starts_with("Dia_"), names_to = "Día", :
datos_largo <- datos_hoja1 %>%
pivot_longer(
cols = starts_with("Dia_"),
names_to = "Día",
names_prefix = "Dia_",
values_to = "Valor"
) %>%
mutate(Día = as.numeric(Día))  # Convertir Día a numérico para el eje X
datos_largo <- datos_hoja1 %>%
pivot_longer(
cols = starts_with("Dia_"),
names_to = "Día",
names_prefix = "Dia_",
values_to = "Valor"
) %>%
mutate(Día = as.numeric(Día))  # Convertir Día a numérico para el eje X
head(datos_largo)
