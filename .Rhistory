tidyverse
package.skeleton()
package.skeleton(tidyverse)
library(tidyverse)
install.packages(tidyverse)
packageSlot()
%>% }
install.packages("tidyverse")
library(tidyverse)
area de circulo
area(10)
area(10)
# Ejemplo de uso de la función
radio <- 5
return(area)
calcular_area_circulo <- function(radio) {
# Verifica si el radio es un número positivo
if (radio <= 0) {
stop("El radio debe ser un número positivo.")
}
# Calcula el área del círculo
area <- pi * radio^2
return(area)
}
# Verifica si el radio es un número positivo
if (radio <= 0) {
stop("El radio debe ser un número positivo.")
}
# Calcula el área del círculo
area <- pi * radio^2
return(area)
# Ejemplo de uso de la función
radio <- 5
area <- calcular_area_circulo(5)
pi*r*r}
pi*r*r}
area <- function(radio) {pi*r*r}
area <-  (r=7)
# Función para verificar si la entrada es numérica o no
verificar_entrada <- function(entrada) {
# Verifica si la entrada es numérica
if (is.numeric(entrada) && !is.na(entrada)) {
return("Es un número")
} else {
return("No es numérico")
}
}
# Ejemplos de uso de la función
print(verificar_entrada(5))        # Ejemplo con un número
print(verificar_entrada("Hola"))   # Ejemplo con una cadena de texto
print(verificar_entrada(NA))       # Ejemplo con un valor no numérico
area <- function(radio) {pi*r*r}
area <-  (r=7)
area <- function(radio) {pi*r*r}
# Función para calcular el área de una circunferencia
calcular_area_circunferencia <- function(radio) {
# Verifica si el radio es mayor a cero
if (radio <= 0) {
stop("El radio debe ser un número positivo.")
}
# Calcula el área
area <- pi * (radio^2)
# Retorna el área
return(area)
}
# Verifica si el radio es mayor a cero
if (radio <= 0) {
stop("El radio debe ser un número positivo.")
}
# Calcula el área
area <- pi * (radio^2)
# Ejemplo de uso
radio <- 5
area <- calcular_area_circunferencia(radio)
# Función para calcular el Índice de Masa Corporal (IMC)
calcular_IMC <- function(peso, altura) {
# Función para calcular el Índice de Masa Corporal (IMC)
calcular_IMC <- function(peso, altura) {
stop("El peso y la altura deben ser números positivos.")
# Calcula el IMC
imc <- peso / (altura^2)
# Clasificación según el IMC
clasificacion <-
# Ejemplo de uso con peso de 69 kg y altura de 1.73 m
peso <- 69  # Peso en kilogramos
altura <- 1.73  # Altura en metros
resultado <- calcular_IMC(peso, altura)
# Imprime el resultado
cat("El IMC es:", round(resultado$IMC, 2), "y la clasificación es:", resultado$Clasificacion, "\n")
# Función para calcular el Índice de Masa Corporal (IMC)
calcular_IMC <- function(peso, altura) {
# Verifica si el peso y la altura son valores positivos
if (peso <= 0 || altura <= 0) {
stop("El peso y la altura deben ser números positivos.")
}
# Calcula el IMC
imc <- peso / (altura^2)
# Clasificación según el IMC
clasificacion <-
# Ejemplo de uso con peso de 69 kg y altura de 1.73 m
peso <- 69  # Peso en kilogramos
altura <- 1.73  # Altura en metros
resultado <- calcular_IMC(peso, altura)
# Imprime el resultado
cat("El IMC es:", round(resultado$IMC, 2), "y la clasificación es:", resultado$Clasificacion, "\n")
resultado <- calcular_IMC(peso, altura)
# Función para calcular el Índice de Masa Corporal (IMC) y clasificar el estado
calcular_IMC_estado <- function(peso, altura) {
# Verifica si el peso y la altura son valores positivos
if (peso <= 0 || altura <= 0) {
stop("El peso y la altura deben ser números positivos.")
}
# Calcula el IMC
imc <- peso / (altura^2)
# Clasificación del estado del IMC
estado <- ifelse(imc >= 18.5 & imc < 25, "Ideal",
ifelse(imc < 18.5 | (imc >= 25 & imc < 30), "No bueno", "Malo"))
# Retorna el IMC y su estado
return(list(IMC = imc, Estado = estado))
}
# Ejemplo de uso con peso de 69 kg y altura de 1.73 m
peso <- 69  # Peso en kilogramos
altura <- 1.73  # Altura en metros
resultado <- calcular_IMC_estado(peso, altura)
# Imprime el resultado
cat("El IMC es:", round(resultado$IMC, 2), "y el estado es:", resultado$Estado, "\n")
calcular_IMC_estado(peso = 69,altura = 1.74)
resultado
resultado <- calcular_IMC_estado(peso, altura)
# Función para calcular el Índice de Masa Corporal (IMC) y clasificar el estado
calcular_IMC_estado <- function(peso, altura) {
# Verifica si el peso y la altura son valores positivos
if (peso <= 0 || altura <= 0) {
stop("El peso y la altura deben ser números positivos.")
}
# Calcula el IMC
imc <- peso / (altura^2)
# Clasificación del estado del IMC
estado <- ifelse(imc >= 18.5 & imc < 25, "Ideal",
ifelse(imc < 18.5 | (imc >= 25 & imc < 30), "No bueno", "Malo"))
# Retorna el IMC y su estado
return(list(IMC = imc, Estado = estado))
}
# Ejemplo de uso: ingresar los valores deseados de peso y altura
peso <- 69  # Peso en kilogramos
altura <- 1.73  # Altura en metros
resultado <- calcular_IMC_estado(peso, altura)
# Imprime el resultado
cat("El IMC es:", round(resultado$IMC, 2), "y el estado es:", resultado$Estado, "\n")
resultado
resultado <- calcular_IMC_estado(peso, altura)
resultado
# Leer un archivo CSV
# Asegúrate de cambiar 'ruta/del/archivo.csv' por la ruta real de tu archivo
datos <- read.csv("ruta/del/archivo.csv",
header = TRUE,       # Indica si la primera fila contiene nombres de columnas
sep = ",",           # Separador de columnas, por defecto es la coma
stringsAsFactors = FALSE)  # Para evitar convertir texto a factores automáticamente
# Leer un archivo CSV
# Asegúrate de cambiar 'ruta/del/archivo.csv' por la ruta real de tu archivo
chucho <- read.csv("LA MOLINA 2014 POTATO WUE (FB) - fb.csv",
header = TRUE,       # Indica si la primera fila contiene nombres de columnas
sep = ",",           # Separador de columnas, por defecto es la coma
stringsAsFactors = FALSE)  # Para evitar convertir texto a factores automáticamente
# Imprimir las primeras filas del archivo para verificar la lectura
head(chucho)
# Mostrar la estructura del data frame leído
str(chucho)
chucho
# Leer un archivo CSV
# Asegúrate de cambiar 'ruta/del/archivo.csv' por la ruta real de tu archivo
chucho <- read.csv("LA MOLINA 2014 POTATO WUE (FB) - fb.csv",
header = TRUE,       # Indica si la primera fila contiene nombres de columnas
sep = ",",           # Separador de columnas, por defecto es la coma
stringsAsFactors = FALSE)  # Para evitar convertir texto a factores automáticamente
# Leer un archivo CSV
# Asegúrate de cambiar 'ruta/del/archivo.csv' por la ruta real de tu archivo
chucho <- read.csv("LA MOLINA 2014 POTATO WUE (FB) - fb.csv",
header = TRUE,       # Indica si la primera fila contiene nombres de columnas
sep = ",",           # Separador de columnas, por defecto es la coma
stringsAsFactors = FALSE)  # Para evitar convertir texto a factores automáticamente
# Imprimir las primeras filas del archivo para verificar la lectura
head(chucho)
# Mostrar la estructura del data frame leído
str(chucho)
chucho
# Leer un archivo CSV
# Asegúrate de cambiar 'ruta/del/archivo.csv' por la ruta real de tu archivo
chucho <- read.csv(file = "LA MOLINA 2014 POTATO WUE (FB) - fb.csv",
header = TRUE,       # Indica si la primera fila contiene nombres de columnas
sep = ",",           # Separador de columnas, por defecto es la coma
stringsAsFactors = FALSE)  # Para evitar convertir texto a factores automáticamente
# Imprimir las primeras filas del archivo para verificar la lectura
head(chucho)
# Mostrar la estructura del data frame leído
str(chucho)
chucho
# Asegúrate de cambiar 'ruta/del/archivo.csv' por la ruta real de tu archivo
chucho <- read.csv(file = "LA MOLINA 2014 POTATO WUE (FB) - fb.csv",
sep = ",",           # Separador de columnas, por defecto es la coma
# Imprimir las primeras filas del archivo para verificar la lectura
head(chucho)
# Asegúrate de cambiar 'ruta/del/archivo.csv' por la ruta real de tu archivo
chucho <- read.csv(file = "LA MOLINA 2014 POTATO WUE (FB) - fb.csv",
# Asegúrate de cambiar 'ruta/del/archivo.csv' por la ruta real de tu archivo
chucho <- read.csv(file = "LA MOLINA 2014 POTATO WUE (FB) - fb.csv",
header = TRUE,
sep = ",", )
chucho
View(chucho)
chucho <- read.tsv(file = "LA MOLINA 2014 POTATO WUE (FB) - fb.tsv",
header = TRUE,
sep = ",", )
chucho <- read.table(file = "LA MOLINA 2014 POTATO WUE (FB) - fb.tsv",
header = TRUE,
sep = ",", )
chucho
View(chucho)
chucho <- read.table(file = "LA MOLINA 2014 POTATO WUE (FB) - fb.tsv",
header = TRUE,
sep = "space" )
chucho <- read.table(file = "LA MOLINA 2014 POTATO WUE (FB) - fb.tsv",
header = TRUE,
sep = " " )
chucho
View(chucho)
chucho <- read.table(file = "LA MOLINA 2014 POTATO WUE (FB) - fb.tsv",
header = TRUE,
sep = "/t " )
chucho <- read.table(file = "LA MOLINA 2014 POTATO WUE (FB) - fb.tsv",
header = TRUE,
sep = "/t" )
chucho <- read.table(file = "LA MOLINA 2014 POTATO WUE (FB) - fb.tsv",
header = TRUE,
sep = "\t" )
chucho
Chucho <- read_excel("LA MOLINA 2014 POTATO WUE (FB) (1).xlsx",
sheet = 1,
col_names = TRUE)
Chucho <- read_excel("LA MOLINA 2014 POTATO WUE (FB) (1).xlsx",
sheet = 1,
col_names = TRUE)
Chucho <- read_excel("LA MOLINA 2014 POTATO WUE (FB) (1).xlsx",
sheet = 2,
col_names = TRUE)
install.packages("readxl")
# Cargar el paquete
library(readxl)
# Leer un archivo de Excel
# Cambia 'archivo.xlsx' por la ruta de tu archivo
chucho<- read_excel("LA MOLINA 2014 POTATO WUE (FB) (1).xlsx",
sheet = 1)  # Puedes cambiar el número o el nombre para leer una hoja específica
# Mostrar las primeras filas del archivo leído
head(chucho)
chucho
View(chucho)
chucho
# Leer un archivo de Excel
# Cambia 'archivo.xlsx' por la ruta de tu archivo
chucho<- read_excel("LA MOLINA 2014 POTATO WUE (FB) (1).xlsx",
sheet = 2)  # Puedes cambiar el número o el nombre para leer una hoja específica
chucho
View(chucho)
install.packages("openxlsx")
library(openxlsx)
library(readxl)
Datos<- read_excel("LA MOLINA 2014 POTATO WUE (FB) (1).xlsx",
sheet = "fb")
View(Datos)
install.packages("inti")
install.packages("agricolae")
library(agricolae)
# Definición del factor
tratamientos <- c("T1", "T2", "T3")  # Niveles del factor
# Diseño completamente al azar
dca <- design.crd(trt=tratamientos, r=repeticiones, seed=123)
repeticiones <- 5  # Número de repeticiones por nivel
# Diseño completamente al azar
dca <- design.crd(trt=tratamientos, r=repeticiones, seed=123)
# Mostrar el diseño experimental
print(dca$book)
# Supongamos que tienes los resultados almacenados en un vector llamado "resultados"
resultados <- c(23, 25, 19, 24, 20, 30, 31, 29, 32, 27, 18, 20, 22, 21, 19)
# Agregar los resultados al diseño
dca$book$y <- resultados
# Realizar el ANOVA
modelo <- aov(y ~ trt, data=dca$book)
# Mostrar el diseño experimental
print(dca$book)
# Supongamos que tienes los resultados almacenados en un vector llamado "resultados"
resultados <- c(23, 25, 19, 24, 20, 30, 31, 29, 32, 27, 18, 20, 22, 21, 19)
# Agregar los resultados al diseño
dca$book$y <- resultados
# Realizar el ANOVA
modelo <- aov(y ~ trt, data=dca$book)
summary(modelo)
install.packages("agricolae")
# Diseño completamente al azar
dca <- design.crd(trt=tratamientos, r=repeticiones, seed=123)
# Mostrar el diseño experimental
print(dca$book)
# Diseño completamente al azar
dca <- design.crd(trt=tratamientos, r=repeticiones, seed=123)
repeticiones <- 5  # Número de repeticiones por nivel
# Diseño completamente al azar
dca <- design.crd(trt=tratamientos, r=repeticiones, seed=123)
# Definición del factor
tratamientos <- c("T1", "T2", "T3")  # Niveles del factor
repeticiones <- 5  # Número de repeticiones por nivel
# Diseño completamente al azar
dca <- design.crd(trt=tratamientos, r=repeticiones, seed=123)
library(agricolae)
# Definición del factor
tratamientos <- c("T1", "T2", "T3")  # Niveles del factor
repeticiones <- 5  # Número de repeticiones por nivel
# Diseño completamente al azar
dca <- design.crd(trt=tratamientos, r=repeticiones, seed=123)
# Mostrar el diseño experimental
print(dca$book)
# Supongamos que tienes los resultados almacenados en un vector llamado "resultados"
resultados <- c(23, 25, 19, 24, 20, 30, 31, 29, 32, 27, 18, 20, 22, 21, 19)
# Agregar los resultados al diseño
dca$book$y <- resultados
# Realizar el ANOVA
modelo <- aov(y ~ trt, data=dca$book)
summary(modelo)
summary(modelo)
# Supongamos que tienes los resultados almacenados en un vector llamado "resultados"
resultados <- c(23, 25, 19, 24, 20, 30, 31, 29, 32, 27, 18, 20, 22, 21, 19)
# Agregar los resultados al diseño
dca$book$y <- resultados
# Realizar el ANOVA
modelo <- aov(y ~ trt, data=dca$book)
summary(modelo)
# Crear un boxplot
boxplot(y ~ trt, data=dca$book, main="Distribución por tratamiento", xlab="Tratamientos", ylab="Resultados", col="lightgreen")
library(agricolae)
# Definición del factor
tratamientos <- c("T1", "T2", "T3")  # Niveles del factor
repeticiones <- 5  # Número de repeticiones por nivel
# Diseño completamente al azar
dca <- design.crd(trt=tratamientos, r=repeticiones, seed=123)
# Mostrar el diseño experimental
print(dca$book)
# Supongamos que tienes los resultados almacenados en un vector llamado "resultados"
resultados <- c(23, 25, 19, 24, 20, 30, 31, 29, 32, 27, 18, 20, 22, 21, 19)
# Agregar los resultados al diseño
dca$book$y <- resultados
# Realizar el ANOVA
modelo <- aov(y ~ trt, data=dca$book)
tratamientos <- c("T1", "T2", "T3")  # Niveles del factor (tratamientos)
bloques <- 4  # Número de bloques
# Generar el diseño en bloques completos al azar
dbca <- design.rcbd(trt=tratamientos, r=bloques, seed=123)
# Mostrar el diseño experimental
print(dbca$book)
# Realizar el análisis de varianza (ANOVA)
modelo <- aov(y ~ trt + block, data=dbca$book)
summary(modelo)
# Definir los niveles de los factores
tratamientos <- c("T1", "T2", "T3")  # Factor 1: Tratamientos
riego <- c("R1", "R2")  # Factor 2: Riego
# Generar todas las combinaciones posibles de los factores
factores <- expand.grid(tratamiento=tratamientos, riego=riego)
# Definir el número de bloques
bloques <- 3  # Número de bloques
# Cargar el paquete agricolae
library(agricolae)
# Definir los niveles de los factores
dosis_nitrogeno <- c(50, 100, 150)  # Dosis de fertilización nitrogenada (kg/ha)
cultivares_papa <- c("C1", "C2", "C3")  # Cultivares de papa
# Generar todas las combinaciones posibles de los factores
factores <- expand.grid(dosis=dosis_nitrogeno, cultivar=cultivares_papa)
# Definir el número de bloques
bloques <- 3  # Número de bloques (por ejemplo, parcelas)
# Generar el diseño en bloques completos al azar (DBCA)
dbca_experimento <- design.rcbd(trt=factores, r=bloques, seed=123)
# Mostrar el diseño experimental
print(dbca_experimento$book)
# Cargar el paquete agricolae
library(agricolae)
# Definir los niveles de los factores
dosis_nitrogeno <- c(50, 100, 150)  # Dosis de fertilización nitrogenada (kg/ha)
cultivares_papa <- c("C1", "C2", "C3")  # Cultivares de papa
# Generar todas las combinaciones posibles de los factores
factores <- expand.grid(dosis=dosis_nitrogeno, cultivar=cultivares_papa)
# Definir el número de bloques
bloques <- 3  # Número de bloques (por ejemplo, parcelas)
# Generar el diseño en bloques completos al azar (DBCA)
dbca_experimento <- design.rcbd(trt=factores, r=bloques, seed=123)
# Definir los niveles de los factores
dosis_nitrogeno <- c(50, 100, 150)  # Dosis de fertilización nitrogenada (kg/ha)
cultivares_papa <- c("C1", "C2", "C3")  # Cultivares de papa
# Generar todas las combinaciones posibles de los factores
factores <- expand.grid(dosis=dosis_nitrogeno, cultivar=cultivares_papa)
# Definir el número de bloques
bloques <- 3  # Número de bloques (por ejemplo, parcelas)
# Generar el diseño en bloques completos al azar (DBCA)
dbca_experimento <- design.rcbd(trt=factores, r=bloques, seed=123)
# Mostrar el diseño experimental
print(dbca_experimento$book)
plots block dosis cultivar
1      1     1    50       C1
2      2     1   100       C2
3      3     1   150       C3
4      4     1    50       C2
5      5     1   100       C3
# Instalación (si no está instalado aún)
install.packages("agricolae")
# Cargar el paquete
library(agricolae)
# Definir los niveles de los factores
dosis_fertilizante <- c(50, 100, 150)  # Dosis de fertilizante en kg/ha
variedades_papa <- c("Canchán", "Peruanita")  # Variedades de papa
# Generar todas las combinaciones posibles de los factores
factores <- expand.grid(dosis=dosis_fertilizante, variedad=variedades_papa)
# Definir el número de bloques (parcelas)
bloques <- 3  # Número de bloques
# Generar el diseño en bloques completos al azar (DBCA)
dbca_experimento <- design.rcbd(trt=factores, r=bloques, seed=123)
# Generar el diseño en bloques completos al azar (DBCA)
dbca_experimento <- design.ab(trt=factores, r=bloques, seed=123)
# Definir los niveles de los factores
dosis_fertilizante <- c(50, 100, 150)  # Dosis de fertilizante en kg/ha
variedades_papa <- c("Canchán", "Peruanita")  # Variedades de papa
# Generar todas las combinaciones posibles de los factores
factores <- expand.grid(dosis=dosis_fertilizante, variedad=variedades_papa)
# Definir el número de bloques (parcelas)
bloques <- 3  # Número de bloques
# Generar el diseño en bloques completos al azar (DBCA)
dbca_experimento <- design.ab(trt=factores, r=bloques, seed=123)
# Mostrar el diseño experimental
print(dbca_experimento$book)
agricolae::design.ab(trt, r, serie = 2, design=c("rcbd","crd","lsd")
# Definir los niveles de los factores
dosis_fertilizante <- c(50, 100, 150)  # Dosis de fertilizante (kg/ha)
variedades_papa <- c("Canchán", "Peruanita")  # Variedades de papa
# Definir el número de bloques (repeticiones)
bloques <- 3
# Generar el diseño factorial con el método AB (combinación de dos factores)
diseño_factorial <- design.ab(trt1=dosis_fertilizante, trt2=variedades_papa, r=bloques, serie=2, design="rcbd")
# Mostrar el diseño experimental
print(diseño_factorial$book)
agricolae::design.ab(trt, r, serie = 2, design=c("rcbd","crd","lsd")
outdesign <-design.ab(trt, r=5, serie=2)
book<-outdesign$book
head(book,10) # print of the field book
# Cargar el paquete
library(agricolae)
# Definir los niveles de los factores
dosis_fertilizante <- c(50, 100, 150)  # Dosis de fertilizante en kg/ha
variedades_papa <- c("Canchán", "Peruanita")  # Variedades de papa
trt<-c(3,2) # factorial 3x2
outdesign <-design.ab(trt, r=5, serie=2)
book<-outdesign$book
head(book,10) # print of the field book
library(tidyverse)
git ad
git add
git comif
git comid
git remote add origin https://github.com/tu_usuario/tu_repositorio.git
git initFieldArgs
git init
